---
interface Props {
  page: string;
}

const { page } = Astro.props;

const categories = [
  { label: "Inicio", slug: "" },
  { label: "Blog", slug: "blog" },
  { label: "Lab", slug: "lab" },
  { label: "Contacto", slug: "contact" },
];
---

<nav class="fixed bottom-10 w-full z-50 px-4" transition:persist>
  <div
    id="navigation-container"
    class="backdrop-blur-lg bg-blur p-1 max-w-96 rounded-2xl mx-auto flex gap-1 items-center"
  >
    {
      categories.map((category) => (
        <a
          class={`py-1.5 text-center px-3 w-full rounded-xl cursor-pointer hover:shadow-md hover:bg-primary hover:scale-[1.05] transition ${page === category.label && "bg-primary shadow-md"}`}
          href={`/${category.slug}`}
        >
          {category.label}
        </a>
      ))
    }
    <div
      id="nav-button-container"
      class="relative group flex items-center justify-center"
    >
      <button
        class="invert min-w-5 min-h-5 bg-primary ml-2 mr-3 hover:!scale-[1.2] transition rounded-sm"
        type="button"
        data-theme-toggle
      >
      </button>
    </div>
  </div>
</nav>

<script>
  function calculateSettingAsThemeString({
    localStorageTheme,
    systemSettingDark,
  }) {
    if (localStorageTheme !== null) {
      return localStorageTheme;
    }

    if (systemSettingDark.matches) {
      return "dark";
    }

    return "light";
  }

  function updateButton({ buttonEl, isDark }) {
    // Change props
  }

  function updateThemeOnHtmlEl({ theme }) {
    document.querySelector("html").setAttribute("data-theme", theme);
  }

  const button = document.querySelector("[data-theme-toggle]");
  const localStorageTheme = localStorage.getItem("theme");
  const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");
  const articleContainer = document.getElementById("article");

  let currentThemeSetting = calculateSettingAsThemeString({
    localStorageTheme,
    systemSettingDark,
  });

  updateButton({ buttonEl: button, isDark: currentThemeSetting === "dark" });
  updateThemeOnHtmlEl({ theme: currentThemeSetting });

  button.addEventListener("click", (_event) => {
    const newTheme = currentThemeSetting === "dark" ? "light" : "dark";

    localStorage.setItem("theme", newTheme);
    updateButton({ buttonEl: button, isDark: newTheme === "dark" });
    updateThemeOnHtmlEl({ theme: newTheme });

    if (articleContainer) {
      if (articleContainer.classList.contains("prose-invert")) {
        articleContainer.classList.remove("prose-invert");
      } else {
        articleContainer.classList.add("prose-invert");
      }
    }

    currentThemeSetting = newTheme;
  });

  const selectTheme = (theme) => {
    updateThemeOnHtmlEl({ theme: theme });
  };
</script>
