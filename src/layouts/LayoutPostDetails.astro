---
import Layout from "../layouts/Layout.astro";
import Datetime from "../components/blog/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "../utils/blog.util";
import { SITE } from "../config";
import { Image } from "astro:assets";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout page="Blog" {...layoutProps}>
  <section>
    <div class="py-10 flex items-center">
      <button
        onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
        class="flex items-center gap-2 px-2 py-1 hover:bg-tertiary rounded-full transition"
      >
        <i class="ph ph-arrow-left"></i>
        Volver
      </button>
    </div>
    <main id="main-content">
      <h1 class="text-3xl sm:text-4xl mb-4">{title}</h1>
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        className="pb-10"
      />

      <article
        id="article"
        role="article"
        class="prose-sm sm:prose-base prose-h2:font-medium prose-p:opacity-80"
      >
        <Content />
      </article>

      <button
        id="back-to-top"
        class="mx-auto flex items-center justify-center gap-2 w-fit mt-10"
      >
        <i class="ph ph-arrow-line-up"></i>Back to top</button
      >
    </main>
  </section>
</Layout>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-secondary";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let codeBlocks = Array.from(document.querySelectorAll("pre"));
    const buttonStyles =
      " absolute right-2 top-2 rounded bg-primary p-1.5 flex items-center justify-center text-xs text-secondary shadow leading-4 font-medium cursor-pointer text-[16px]";

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("i");
      copyButton.className = "ph ph-copy" + buttonStyles;
      // let copyButton = document.createElement("button");
      // copyButton.className =
      //   "absolute right-3 -top-3 rounded bg-primary px-2 py-1 text-xs text-secondary shadow leading-4 font-medium";
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.className = "ph ph-check" + buttonStyles;

      setTimeout(() => {
        button.className = "ph ph-copy" + buttonStyles;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
