---
import Layout from "../layouts/Layout.astro";
import Hero from "./home/Hero.astro";
import Projects from "./home/Projects.astro";
import FeaturedBlogs from "./home/FeaturedBlogs.astro";
---

<Layout title="Rafael Alexander â€” UX/UI Designer & Developer">
  <main>
    <Hero />
    <Projects />
    <Projects />
    <FeaturedBlogs />
  </main>
</Layout>

<style></style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const body = document.body;

    const MathUtils = {
      lerp: (a, b, n) => (1 - n) * a + n * b,
      distance: (x1, y1, x2, y2) => Math.hypot(x2 - x1, y2 - y1),
    };

    const getMousePos = (ev) => {
      let posx = 0;
      let posy = 0;
      if (!ev) ev = window.event;
      if (ev.pageX || ev.pageY) {
        posx = ev.pageX;
        posy = ev.pageY;
      } else if (ev.clientX || ev.clientY) {
        posx = ev.clientX + body.scrollLeft + docEl.scrollLeft;
        posy = ev.clientY + body.scrollTop + docEl.scrollTop;
      }
      return { x: posx, y: posy };
    };

    let mousePos = (lastMousePos = cacheMousePos = { x: 0, y: 0 });

    window.addEventListener("mousemove", (ev) => (mousePos = getMousePos(ev)));

    const getMouseDistance = () =>
      MathUtils.distance(
        mousePos.x,
        mousePos.y,
        lastMousePos.x,
        lastMousePos.y
      );

    class Image {
      constructor(el) {
        this.DOM = { el: el };
        this.defaultStyle = {
          scale: 1,
          x: 0,
          y: 0,
          opacity: 0,
        };
        this.getRect();
      }

      getRect() {
        this.rect = this.DOM.el.getBoundingClientRect();
      }
      isActive() {
        return gsap.isTweening(this.DOM.el) || this.DOM.el.style.opacity != 0;
      }
    }

    class ImageTrail {
      constructor() {
        this.DOM = { content: document.querySelector(".content") };
        this.images = [];
        [...this.DOM.content.querySelectorAll("img")].forEach((img) =>
          this.images.push(new Image(img))
        );
        this.imagesTotal = this.images.length;
        this.imgPosition = 0;
        this.zIndexVal = 1;
        this.threshold = 200;
        requestAnimationFrame(() => this.render());
      }
      render() {
        let distance = getMouseDistance();
        cacheMousePos.x = MathUtils.lerp(
          cacheMousePos.x || mousePos.x,
          mousePos.x,
          0.05
        );
        cacheMousePos.y = MathUtils.lerp(
          cacheMousePos.y || mousePos.y,
          mousePos.y,
          0.05
        );

        if (distance > this.threshold) {
          this.showNextImage();
          ++this.zIndexVal;
          this.imgPosition =
            this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;

          lastMousePos = mousePos;
        }

        let isIdle = true;
        for (let img of this.images) {
          if (img.isActive()) {
            isIdle = false;
            break;
          }
        }
        if (isIdle && this.zIndexVal !== 1) {
          this.zIndexVal = 1;
        }

        requestAnimationFrame(() => this.render());
      }
      showNextImage() {
        const img = this.images[this.imgPosition];
        gsap.killTweensOf(img.DOM.el);

        const randomDeg = 0;

        new gsap.timeline()
          .set(
            img.DOM.el,
            {
              startAt: { opacity: 0, scale: 1 },
              opacity: 1,
              scale: 1,
              zIndex: this.zIndexVal,
              x: cacheMousePos.x - img.rect.width / 2,
              y: cacheMousePos.y - img.rect.height / 2,
            },
            0
          )
          .to(
            img.DOM.el,
            1,
            {
              ease: "expo.out",
              x: mousePos.x - img.rect.width / 2,
              y: mousePos.y - img.rect.height / 2,
              rotation: randomDeg,
            },
            0
          )
          .to(
            img.DOM.el,
            1.5,
            {
              ease: "power1.out",
            },
            0.5
          )

          .to(
            img.DOM.el,
            1.5,
            {
              ease: "expo.in",
              stagger: 2,
              y: "100vh",
              opacity: 0,
            },
            0.75
          );
      }
    }

    // preload images
    const preloadImages = () => {
      return new Promise((resolve, reject) => {
        imagesLoaded(document.querySelectorAll(".content__img"), resolve);
      });
    };

    preloadImages().then(() => {
      new ImageTrail();
    });
  });
</script>

<script is:inline>
  gsap.registerPlugin(ScrollTrigger);

  function playTimeline() {
    const myTimeline = gsap
      .timeline()
      .to("#project-cta", {
        scale: 1,
        opacity: 1,
        ease: "expo.out",
        duration: 0.1,
      })
      .to("#project-cta", { y: -40, ease: "back.out(2)", duration: 0.5 })
      .to(".cta-item", {
        scale: 1,
        stagger: 0.15,
        duration: 0.5,
        ease: "back.out",
      });

    return myTimeline;
  }

  function playTimelineBack() {
    const myTimeline = gsap
      .timeline()
      .to("#project-cta", { scale: 0, opacity: 0, duration: 0.2 })
      .to("#project-cta", { y: 0, duration: 0 })
      .to(".cta-item", { scale: 0, stagger: 0.1, duration: 0 });

    return myTimeline;
  }

  ScrollTrigger.create({
    trigger: ".trigger-element",
    start: "+=500 bottom",
    end: "bottom",
    onEnter: () => playTimeline().play(),
    onLeaveBack: () => playTimelineBack().play(),
  });
</script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    gsap.timeline().to(
      "#hero-item",
      {
        y: 0,
        opacity: 1,
        duration: 1,
        stagger: 0.2,
        ease: "circ.inOut",
      },
      0.5
    );
  });
</script>
