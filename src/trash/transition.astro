---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Welcome to Astro.">
  <main class="app">
    <section class="nav">
      <div class="nav_wrapper">
        <ul class="nav_list">
          <li class="nav_list_item">Home</li>
          <li class="nav_list_item">About</li>
          <li class="nav_list_item">Gallery</li>
          <li class="nav_list_item">Contact</li>
        </ul>
      </div>
    </section>

    <section class="transition">
      <div class="transition_wrapper">
        <div class="transition_element">
          <h1>T</h1>
          <h1>E</h1>
          <h1>Q</h1>
          <h1>U</h1>
          <h1>I</h1>
          <h1>L</h1>
          <h1>A</h1>
        </div>

        <div class="transition_columns">
          <div class="transition_column">
            <div class="transition_column_text">
              <span>We</span>
              <span>W</span>
            </div>
          </div>

          <div class="transition_column">
            <div class="transition_column_text">
              <span>Are</span>
              <span>A</span>
            </div>
          </div>

          <div class="transition_column"></div>

          <div class="transition_column">
            <div class="transition_column_text">
              <span>Tequila</span>
              <span>T</span>
            </div>
          </div>

          <div class="transition_column">
            <div class="transition_column_text">
              <span>Creators</span>
              <span>W</span>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style is:inline>
  :root {
    --font-nav: calc(100vw / 1920 * 75);
  }

  html,
  body,
  :root {
    width: 100%;
    height: 100vh;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  /* body {
    font-family: "DM Sans", sans-serif;
    background-color: #171717;
    color: #fff;
  } */

  /* === NAV BAR === */
  section.nav {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    z-index: 100;
  }

  .nav_wrapper {
    padding: 2em;
  }

  .nav_list {
    display: inline-flex;
    gap: 20%;
  }

  .nav_list_item {
    list-style: none;
    font-size: var(--font-nav);
    text-transform: uppercase;
    text-align: center;
  }

  /* === TRANSITION === */
  section.transition {
    display: none;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    z-index: 200;
  }

  .transition_columns {
    display: flex;
    width: 100%;
  }

  .transition_column {
    position: relative;
    width: 20%;
    border-right: 1px solid hsla(0, 0%, 100%, 0.154);
    height: 100vh;
    transform: translateY("-101%");
    background: #d63500;
  }

  .transition_column_text {
    position: absolute;
    left: 2rem;
    top: 2rem;
    height: calc(100% - 4rem);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .transition_column_text span {
    font-size: 2rem;
  }

  .transition_element {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    height: 50%;
    width: 0;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    z-index: 150;
  }

  .transition_element h1 {
    font-size: 10rem;
    line-height: 0;
    text-align: center;
  }
</style>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>

<script is:inline>
  const nav = document.querySelector(".nav");
  const navItem = nav.querySelectorAll(".nav_list_item");

  const transition = document.querySelector(".transition"),
    transitionCol = transition.querySelectorAll(".transition_column"),
    transitionColText = transition.querySelectorAll(
      ".transition_column_text > span"
    ),
    transitionElementText = transition.querySelectorAll(
      ".transition_element > h1"
    );

  const timeline = gsap.timeline({
    paused: true,
    defaults: { ease: "expo.inOut" },
  });

  const initTransition = () => {
    gsap.set(transition, { display: "none", autoAlpha: 0 });
    gsap.set(transitionCol, { y: "-101%" });
    gsap.set(transitionColText, { autoAlpha: 0, y: "-101%" });
    gsap.set(transitionElementText, { autoAlpha: 0 });
  };

  const showTransition = () => {
    gsap
      .timeline({ defaults: { ease: "expo.inOut" } })
      .to(
        transition,
        {
          duration: 0.2,
          display: "block",
          autoAlpha: 1,
        },
        0
      )
      .to(
        transitionCol,
        {
          duration: 1.25,
          y: 0,
          stagger: {
            each: 0.045,
            from: "random",
          },
        },
        0.05 // Delay
      )
      .to(
        transitionColText,
        {
          duration: 1,
          autoAlpha: 1,
          y: 0,
        },
        0.5
      )
      .to(
        transitionColText,
        {
          duration: 1,
          autoAlpha: 0,
          y: "101%",
        },
        2.75
      )
      .to(
        transitionElementText,
        {
          duration: 1,
          autoAlpha: 1,
          stagger: {
            each: 0.055,
            from: "random",
          },
          onComplete: () => {
            hide();
          },
        },
        0.75
      );
  };

  const hide = () => {
    gsap
      .timeline({ defaults: { ease: "expo.inOut" } })
      .to(
        transitionElementText,
        {
          duration: 1,
          autoAlpha: 0,
          stagger: 0.055,
        },
        0
      )
      .to(
        transitionCol,
        {
          duration: 1.25,
          y: "-101%",
          stagger: {
            each: 0.045,
            from: "random",
          },
        },
        0.75
      )
      .to(transition, {
        duration: 0.2,
        display: "none",
        autoAlpha: 0,
        onComplete: initTransition,
      });
  };

  navItem.forEach((item) => {
    item.addEventListener("click", showTransition);
  });

  window.onload = () => {
    initTransition();
  };
</script>
